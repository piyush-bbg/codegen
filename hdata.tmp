#ifndef ${attributes['prefix_hpp_guard']}_MESSAGE_HPP
#define ${attributes['prefix_hpp_guard']}_MESSAGE_HPP

% if len(attributes['external_includes']) > 0:
// Additional includes
% for file in attributes['external_includes']:
#include "${file}"
% endfor
% endif

#include <unordered_map>
#include <string>
#include <vector>
#include <stdint.h>

using namespace QB::Core;
using namespace std;

% for namespace in attributes['namespaces']:
namespace ${namespace} {
% endfor

% if len(attributes['typedefs']) > 0:
/*  
 * typedefs.
 */
% for typedef in attributes['typedefs'].items():
${'typedef %s %s;' % ( typedef[1], typedef[0])}
% endfor
% endif

% for messages in attributes['messages']:
% for name,params in messages.items():
struct ${name} : public QMessage
{
% for field in params['fields']:
% if 'type' in field:
% if 'size' in field:
  ${'%s %s[%s];' % (field['type'], field['name'], field['size'])}
% else:
  ${'%s %s;' % (field['type'], field['name'])}
% endif
% endif
% endfor

  ${name}();
  void clear();

  virtual const char* tableName() const;
  virtual K           to_k(vector<QMessage*>& v) const;
  virtual void        print()     const;
  virtual void        release();
  ostream& operator >> (ostream& os);
};
bool put(IOPacket& p, const ${name}& v);
bool get(IOPacket& p, ${name}& v);
ostream& operator << (ostream& os,
                      const QB::MktData::${fname}::${name}& obj);
% endfor
% endfor

% for namespace in reversed(attributes['namespaces']):
} // namespace ${namespace}
% endfor        
#endif